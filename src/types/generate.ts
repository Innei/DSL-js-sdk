import { spawnSync } from 'node:child_process'
import { readFileSync, writeFileSync } from 'node:fs'

main()

async function main() {
  await generate('search', 'https://test-search.rss3.dev/v3/api-docs', null, (schema) => {
    schema = schema
      .replace(/\*\/\*/g, 'application/json')
      .replace(/innerMap\?: \{[\s\S]+?\};/g, '')
      .replace(/Record<string, never>/g, 'Record<string, any>')
      .replace(/JSONObject: {[^{}]+}/g, 'JSONObject: any')
      .replace(/metadata\?: {[^{}]+}/g, "metadata?: data['schemas']['Transfer']['metadata']")

    return (schema = `import {components as data} from './data'\n${schema}`)
  })

  await generate(
    'data',
    'https://test-pregod.rss3.dev/v1/openapi?json=true',
    (schema) => {
      delete schema.components.schemas.TransferTypes
      return schema
    },
    (schema) => {
      return schema
        .replace(/(platform\??): (\(?string\)?)(\[\])?;/g, '$1: components["schemas"]["PlatformName"]$3;')
        .replace(/(network\??): (\(?string\)?)(\[\])?;/g, '$1: components["schemas"]["NetworkName"]$3;')
    },
  )
}

async function generate(
  name: string,
  url: string,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  jsonFn: null | ((schema: any) => any),
  tsFn: (schema: string) => string,
) {
  let schema = await (await fetch(url)).json()
  schema = jsonFn ? jsonFn(schema) : schema
  writeFileSync(`tmp/${name}.json`, JSON.stringify(schema))
  spawnSync('npx', ['--yes', 'openapi-typescript', `tmp/${name}.json`, '--output', `src/types/${name}.ts`], {
    stdio: 'inherit',
  })

  schema = readFileSync(`src/types/${name}.ts`).toString()
  schema = tsFn ? tsFn(schema) : schema

  writeFileSync(`src/types/${name}.ts`, `// generated by src/types/generate.ts\n\n` + schema)
}
